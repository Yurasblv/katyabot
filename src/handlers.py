from aiogram import Dispatcher
from src.bot import bot, logger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.states import Person
from aiogram.dispatcher import FSMContext
from typing import Mapping, Optional
from src.config import Cfg
from aiogram import types


async def zero_handler(message: types.Message, state: FSMContext):
    logger.info(await state.get_data())
    btn1 = InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å ‚úç", callback_data="–ó–∞–ø–æ–ª–Ω–∏—Ç—å")
    kb1 = InlineKeyboardMarkup(row_width=2).add(btn1)
    await Person.ACCEPT.set()
    await bot.send_message(
        message.from_user.id,
        text="–ü—Ä–∏–≤–µ—Çü•∞–†–∞–¥–∞,—á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π!‚ù§\n"
             "–Ø —Å–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –º–µ—Å—è—Ü, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∏–π—Ç–∏ –∫ —Ü–µ–ª–∏ üéØ\n"
             "–î–ª—è —Ç–æ–≥–æ,—á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π , –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–Ω–∫–µ—Ç—É‚ù§",
        reply_markup=kb1,
    )


async def start_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(callback_query.data)
    async with state.proxy() as data:
        data["ACCEPT"] = True
    await Person.next()
    await bot.send_message(
        callback_query.from_user.id, text="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:\n(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)"
    )


async def name_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    print(message.from_user.id)
    async with state.proxy() as data:
        data["PERSON_CREDS"] = message.text
        print(data)
    await Person.next()
    await bot.send_message(message.from_user.id, text="–í–æ–∑—Ä–∞—Å—Ç\n(—á–∏—Å–ª–æ)")


async def process_digit_name_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–ß–∏—Å–ª–æ –≤ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏!")


async def process_wrong_name_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —Ñ–æ—Ä–º–∞—Ç")


async def age_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["AGE"] = message.text
    await Person.next()
    await bot.send_message(message.chat.id, text="–†–æ—Å—Ç\n(–≤ —Å–º)")


async def process_age_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –≤–æ–∑—Ä–∞—Å—Ç")


async def height_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["HEIGHT"] = message.text
    await Person.next()
    await bot.send_message(message.chat.id, text="–í–µ—Å\n(–≤ –∫–≥)")


async def process_height_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —Ä–æ—Å—Ç")


async def weight_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["WEIGHT"] = message.text
    await Person.next()
    inline_btn_1 = InlineKeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="–ü–æ—Ö—É–¥–µ–Ω–∏–µ")
    inline_btn_2 = InlineKeyboardButton(
        "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", callback_data="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    )
    inline_btn_3 = InlineKeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")
    inline_kb1 = InlineKeyboardMarkup().add(
        inline_btn_1).add(inline_btn_2).add(inline_btn_3)
    await bot.send_message(
        message.chat.id, text="–ö–∞–∫–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?", reply_markup=inline_kb1
    )


async def process_weight_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É–∫–∞–∑–∞–Ω –≤–æ–∑—Ä–∞—Å—Ç")


async def goal_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(callback_query.data)
    async with state.proxy() as data:
        data["GOAL"] = callback_query.data
    await Person.next()
    inline_btn_1 = InlineKeyboardButton("üèüÔ∏è –ó–∞–ª", callback_data="–ó–∞–ª")
    inline_btn_2 = InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="–î–æ–º–∞")
    inline_kb1 = InlineKeyboardMarkup(row_width=3).row(inline_btn_1, inline_btn_2)
    await bot.send_message(callback_query.from_user.id, text=f"{data['GOAL']}")
    await bot.send_message(
        callback_query.from_user.id,
        text="–ì–¥–µ –±—É–¥–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=inline_kb1,
    )


async def location_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(callback_query.data)
    async with state.proxy() as data:
        data["LOCATION"] = callback_query.data
    if data["LOCATION"] == "–î–æ–º–∞":
        inline_btn_1 = InlineKeyboardButton("‚úÖ –î–∞", callback_data="–î–∞")
        inline_btn_2 = InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="–ù–µ—Ç")
        inline_kb1 = InlineKeyboardMarkup(row_width=2).row(inline_btn_1, inline_btn_2)
        await Person.next()
        print(await state.get_state())
        await bot.send_message(
            callback_query.from_user.id, text=f"{data['LOCATION']}"
        )
        await bot.send_message(
            callback_query.from_user.id,
            text="–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∑–∞–Ω—è—Ç–∏–π?",
            reply_markup=inline_kb1,
        )
    if data["LOCATION"] == "–ó–∞–ª":
        await state.update_data({"EQUIPMENT_BOOLEAN": "-", "EQUIPMENT_INFO": "-"})
        await Person.CONTRAINDICATIONS_BOOLEAN.set()
        inline_btn_1 = InlineKeyboardButton("‚úÖ –î–∞", callback_data="–î–∞")
        inline_btn_2 = InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="–ù–µ—Ç")
        inline_kb1 = InlineKeyboardMarkup(row_width=2).row(inline_btn_1, inline_btn_2)
        await bot.send_message(
            callback_query.from_user.id, text=f"{data['LOCATION']}"
        )
        await bot.send_message(
            callback_query.from_user.id,
            text="–ò–º–µ—é—Ç—Å—è –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?",
            reply_markup=inline_kb1,
        )


async def equipment_bool_handler(
        callback_query: types.CallbackQuery, state: FSMContext
):
    logger.info(callback_query.data)
    async with state.proxy() as data:
        data["EQUIPMENT_BOOLEAN"] = callback_query.data
    if data["EQUIPMENT_BOOLEAN"] == "–î–∞":
        await Person.next()
        await bot.send_message(
            callback_query.from_user.id, text=f"{data['EQUIPMENT_BOOLEAN']}"
        )
        await bot.send_message(
            callback_query.from_user.id, text="–ù–∞–ø–∏—à–∏ –∫–∞–∫–æ–π –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏"
        )
    if data["EQUIPMENT_BOOLEAN"] == "–ù–µ—Ç":
        await state.update_data({"EQUIPMENT_INFO": "-"})
        await Person.CONTRAINDICATIONS_BOOLEAN.set()
        inline_btn_1 = InlineKeyboardButton("‚úÖ –î–∞", callback_data="–î–∞")
        inline_btn_2 = InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="–ù–µ—Ç")
        inline_kb1 = InlineKeyboardMarkup(row_width=2).row(inline_btn_1, inline_btn_2)
        await bot.send_message(
            callback_query.from_user.id, text=f"{data['EQUIPMENT_BOOLEAN']}"
        )
        await bot.send_message(
            callback_query.from_user.id,
            text="–ò–º–µ—é—Ç—Å—è –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?",
            reply_markup=inline_kb1,
        )


async def equipment_info_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["EQUIPMENT_INFO"] = message.text
    await Person.next()
    inline_btn_1 = InlineKeyboardButton("‚úÖ –î–∞", callback_data="–î–∞")
    inline_btn_2 = InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="–ù–µ—Ç")
    inline_kb1 = InlineKeyboardMarkup(row_width=2).row(inline_btn_1, inline_btn_2)
    await bot.send_message(
        message.chat.id, text="–ò–º–µ—é—Ç—Å—è –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?", reply_markup=inline_kb1
    )


async def contraindications_handler_boolean(
        callback_query: types.CallbackQuery, state: FSMContext
):
    logger.info(callback_query.data)
    async with state.proxy() as data:
        data["CONTRAINDICATIONS_BOOLEAN"] = callback_query.data
    if data["CONTRAINDICATIONS_BOOLEAN"] == "–î–∞":
        await Person.next()
        await bot.send_message(
            callback_query.from_user.id, text=f"{data['CONTRAINDICATIONS_BOOLEAN']}"
        )
        await bot.send_message(callback_query.from_user.id, text="–û–ø–∏—à–∏ –∫–∞–∫–∏–µ")
    if data["CONTRAINDICATIONS_BOOLEAN"] == "–ù–µ—Ç":
        await state.update_data(
            {
                "CONTRAINDICATIONS_BOOLEAN": callback_query.data,
                "CONTRAINDICATIONS_INFO": "-",
            }
        )
        await Person.BREAST_SIZE.set()
        await bot.send_message(
            callback_query.from_user.id, text=f"{data['CONTRAINDICATIONS_BOOLEAN']}"
        )
        await bot.send_message(
            callback_query.from_user.id,
            text="–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ç–µ–ª–∞ ü§©",
        )
        await bot.send_message(
            callback_query.from_user.id, text="–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≥—Ä—É–¥–∏\n(–≤ —Å–º)"
        )


async def contraindications_handler_info(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["CONTRAINDICATIONS_INFO"] = message.text
    await Person.next()
    await bot.send_message(
        message.chat.id, text="–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ç–µ–ª–∞ ü§©"
    )
    await bot.send_message(message.chat.id, text="–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≥—Ä—É–¥–∏\n(–≤ —Å–º)")


async def process_breast_param_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞!")


async def breast_param_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["BREAST_SIZE"] = message.text
    await Person.next()
    await bot.send_message(message.chat.id, text="–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏\n(–≤ —Å–º)")


async def process_waist_param_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞!")


async def waist_param_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["WAIST_SIZE"] = message.text
    await Person.next()
    await bot.send_message(message.chat.id, text="–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –±–µ–¥–µ—Ä\n(–≤ —Å–º)")


async def process_hips_param_invalid(message: types.Message):
    logger.info(message.text)
    return await message.reply("–¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞!")


async def hips_param_handler(message: types.Message, state: FSMContext):
    logger.info(message.text)
    async with state.proxy() as data:
        data["HIPS_SIZE"] = message.text
    inline_btn_1 = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
    inline_kb_1 = InlineKeyboardMarkup().add(inline_btn_1)
    await bot.send_message(
        message.chat.id,
        text="–ì–æ—Ç–æ–≤–æ üòÉ\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        reply_markup=inline_kb_1,
    )


async def check_info_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(callback_query.data)
    inline_btn_1 = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîô", callback_data="–ó–∞–Ω–æ–≤–æ")
    inline_btn_2 = InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì®", callback_data="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    inline_kb_1 = InlineKeyboardMarkup().row(inline_btn_1, inline_btn_2)
    await bot.send_message(
        callback_query.from_user.id,
        text=f"{await info_editor(data=await state.get_data())}\n"
             f" –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å\""
             f" –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–≤ \"–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ\"",
        reply_markup=inline_kb_1,
    )


async def send_info_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(callback_query.data)
    await bot.send_message(
        Cfg.CHANNEL_ID, text=await info_editor(data=await state.get_data())
    )
    await bot.send_message(
        callback_query.from_user.id,
        text="–Ø –ø–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—Éü•≥\n–ñ–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É üßò‚Äç‚ôÄ\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∂–º–∏ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É \"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å üîÑ\""
    )
    await state.reset_state()


async def rollback_info_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    callback_query.data = '–ó–∞–ø–æ–ª–Ω–∏—Ç—å'
    await Person.ACCEPT.set()
    await start_handler(callback_query, state)


async def info_editor(data: Optional[Mapping]):
    person_info = (
        f"–§–ò–û: {data['PERSON_CREDS']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['AGE']}\n"
        f"–†–æ—Å—Ç: {data['HEIGHT']}\n"
        f"–í–µ—Å: {data['WEIGHT']}\n"
        f"–¶–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data['GOAL']}\n"
        f"–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏–π: {data['LOCATION']}\n"
        f"–ù–∞–ª–∏—á–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {data['EQUIPMENT_BOOLEAN']}\n"
        f"–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –Ω–∞–ª–∏—á–∏–∏: {data['EQUIPMENT_INFO']}\n"
        f"–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: {data['CONTRAINDICATIONS_BOOLEAN']}\n"
        f"–ö–∞–∫–∏–µ –∏–º–µ—é—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: {data['CONTRAINDICATIONS_INFO']}\n"
        f"–ó–∞–º–µ—Ä—ã —Ç–µ–ª–∞ \n"
        f"- –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: {data['BREAST_SIZE']} —Å–º \n"
        f"- –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏: {data['WAIST_SIZE']} —Å–º \n"
        f"- –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä: {data['HIPS_SIZE']} —Å–º \n"
    )
    return person_info


def register_handler(dp: Dispatcher):
    dp.register_message_handler(zero_handler, commands=["start", "reload"], state="*")
    dp.register_callback_query_handler(
        start_handler,
        lambda callback_query: callback_query.data == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å",
        state=Person.ACCEPT,
    )
    dp.register_message_handler(
        process_digit_name_invalid,
        lambda message: [message for char in message.text if char.isdigit()],
        state=Person.PERSON_CREDS,
    )
    dp.register_message_handler(
        process_wrong_name_invalid,
        lambda message: len(message.text.split()) != 2,
        state=Person.PERSON_CREDS,
    )
    dp.register_message_handler(
        name_handler,
        state=Person.PERSON_CREDS,
        regexp=r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë]* [A-Za-z–ê-–Ø–∞-—è–Å—ë]+",
    )
    dp.register_message_handler(
        process_age_invalid,
        lambda message: [message for char in message.text if not char.isdigit()],
        state=Person.AGE,
    )
    dp.register_message_handler(age_handler, state=Person.AGE)
    dp.register_message_handler(
        process_height_invalid,
        lambda message: [message for char in message.text if not char.isdigit()],
        state=Person.HEIGHT,
    )
    dp.register_message_handler(height_handler, state=Person.HEIGHT)
    dp.register_message_handler(
        process_weight_invalid,
        lambda message: [message for char in message.text if not char.isdigit()],
        state=Person.WEIGHT,
    )
    dp.register_message_handler(weight_handler, state=Person.WEIGHT)
    dp.register_callback_query_handler(
        goal_handler,
        lambda callback_query: callback_query.data in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                                                       "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
                                                       "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"],
        state=Person.GOAL,
    )
    dp.register_callback_query_handler(
        location_handler,
        lambda callback_query: callback_query.data in ["–ó–∞–ª", "–î–æ–º–∞"],
        state=Person.LOCATION,
    )
    dp.register_callback_query_handler(
        equipment_bool_handler,
        lambda callback_query: callback_query.data in ["–î–∞", "–ù–µ—Ç"],
        state=Person.EQUIPMENT_BOOLEAN,
    )
    dp.register_message_handler(equipment_info_handler, state=Person.EQUIPMENT_INFO)
    dp.register_callback_query_handler(
        contraindications_handler_boolean,
        lambda callback_query: callback_query.data in ["–î–∞", "–ù–µ—Ç"],
        state=Person.CONTRAINDICATIONS_BOOLEAN,
    )
    dp.register_message_handler(
        contraindications_handler_info, state=Person.CONTRAINDICATIONS_INFO
    )
    dp.register_message_handler(
        process_breast_param_invalid,
        lambda message: [message for char in message.text if not char.isdigit()],
        state=Person.BREAST_SIZE,
    )
    dp.register_message_handler(breast_param_handler, state=Person.BREAST_SIZE)
    dp.register_message_handler(
        process_waist_param_invalid,
        lambda message: [message for char in message.text if not char.isdigit()],
        state=Person.WAIST_SIZE,
    )
    dp.register_message_handler(waist_param_handler, state=Person.WAIST_SIZE)
    dp.register_message_handler(
        process_hips_param_invalid,
        lambda message: [message for char in message.text if not char.isdigit()],
        state=Person.HIPS_SIZE,
    )
    dp.register_message_handler(hips_param_handler, state=Person.HIPS_SIZE)
    dp.register_callback_query_handler(
        check_info_handler,
        lambda callback_query: callback_query.data == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
        state=Person.HIPS_SIZE,
    )
    dp.register_callback_query_handler(
        send_info_handler,
        lambda callback_query: callback_query.data == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
        state=Person.HIPS_SIZE,
    )
    dp.register_callback_query_handler(
        rollback_info_handler,
        lambda callback_query: callback_query.data == "–ó–∞–Ω–æ–≤–æ",
        state=Person.HIPS_SIZE,
    )
